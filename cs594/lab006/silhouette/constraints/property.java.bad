package silhouette.constraints;

/** 
 * The abstract class for constrained properties. All constrained
 * properties should subclass this property and add a value field
 * with a type specific to that property (e.g., an integer field
 * for an integer property.
 */

import java.util.*;

abstract class property {

  /**
   * A "dummy" constraint that is used to indicate whether a property
   * is currently being brought up-to-date. If a property's value is
   * requested while it is being brought up-to-date, then we know that
   * we have a set of circular constraints and that we should just
   * return its value. inProgress will be assigned to the invalidConstraint
   * field, which is the field used to determine whether a property
   * is up-to-date, out-of-date, or in the process of being brought up-to-date
   */
  static constraint inProgress = new constraint() {
    public void formula(constrainedObject self) {}
    };

    /**
     * The last constraint to mark this property out-of-date. This
     * field doubles as a mark field. If the field is null, it means
     * the property is up-to-date; otherwise the property is out-of-date
     * and should be brought up-to-date by evaluating the constraint
     * pointed to by invalidConstraint
     */
  constraint invalidConstraint = null;

    /**
     * The list of constraints that depend on this property
     */
  List dependents = null;

  /**
   * The list of constraints that set this property
   */
  List constraints = null;

  /* Weizhong: get access to constraints */
  public Iterator getConstraints() {
    if (constraints != null) 
      return constraints.iterator();
    return null;
  }

  /**
   * The name of the property
   */
  String name = null;

  public property(String nm) {
    name = nm;
  }

    /**
     * Add a constraint to this property's dependents list
     */
  void addDependent(constraint cn) {
    if (dependents == null)
      dependents = new LinkedList();
    dependents.add(cn);
  }

  /**
   * Return a list-iterator of this property's dependents 
   */
  ListIterator getDependents() {
    if (dependents != null)
      return dependents.listIterator();
    else
      return null;
  }

  /**
   * Remove a constraint from this property's dependents list 
   */
  void removeDependent(constraint cn) {
    dependents.remove(cn);
  }

  /**
   * Mark the property as out-of-date and then use a depth-first
   * search to mark all constraints
   * that depend on this property as out-of-date
   */
  void mark(constraint invalidatingConstraint) {
    ListIterator dependentProperties = getDependents();
    constraint cn;

    // The property could have been previously marked out-of-date
    // by another constraint. If so, then its dependents have
    // already been marked out-of-date and we don't have to continue
    // the mark process
    boolean needToMark = (invalidConstraint == null ? true : false);

    // even if invalidConstraint already points to another constraint,
    // we make invalidConstraint point to this constraint. That way
    // we maintain the invariant that invalidConstraint always points
    // to the *last* constraint to invalidate the property.
    invalidConstraint = invalidatingConstraint;

    // perform the dependent marking using depth-first search 
    if (needToMark) {
      if (dependentProperties != null) {
	while (dependentProperties.hasNext()) {
	  cn = (constraint)dependentProperties.next();
	  if (cn.valid == true)
	    cn.mark();
	}
      }
    }
  }

    /**
     * bring the property up-to-date by evaluating its constraint
     */
  void validate() {
    constraint temp = invalidConstraint;
    invalidConstraint = property.inProgress;
    temp.validate();
    invalidConstraint = null;
  }

    /**
     * adds a constraint to this property's dependents list if
     * the constraint is not already there
     */
  void recordDependency() {
    // we have to have a constraint in order to record a dependency. If
    // a constraint requested this property's value, then the constraint
    // will be on top of the constraint stack. If the application has
    // requested this property's value, then the constraint stack will
    // be empty and we should not record a constraint
    if (!constraint.constraintStack.empty()) {
      constraintStackInfo info
	= (constraintStackInfo)constraint.constraintStack.peek();
      if (info.inputs.hasNext()) {
	// check whether the dependency has already been recorded
	property nextInput = (property)info.inputs.next();
	if (nextInput != this) {
	  // dependency has not been recorded--replace the existing input
	  // with this property
	  info.inputs.set(this);
	  
	  // add the constraint to this property's dependents list
	  this.addDependent(info.cn);
	  
	  // remove the constraint from nextInput's dependents list
	  nextInput.removeDependent(info.cn);
	}
      }
      // we've reached the end of the input list so add this property
      // to the input list and add the constraint to this property's
      // dependents list
      else { 
	info.inputs.add(this);
	// skip past this new element
//	info.inputs.next();
	this.addDependent(info.cn);
      }
    }
  }

  /**
   * Adds this property to a constraint's list of outputs. The owner
   * parameter is the object that owns this property. recordOutput
   * returns true if the property is added to the constraint's list of
   * outputs and false otherwise.
   */
  boolean recordOutput(constrainedObject owner) {
    boolean outputAdded = false;
      // Its possible that the application rather than a constraint
      // is setting the value of this property. We only want to
      // add the property to a constraint's output list if a constraint
      // is setting the property
    if (!constraint.constraintStack.empty()) {
      constraintStackInfo info 
	= (constraintStackInfo)constraint.constraintStack.peek();
      if (info.outputs.hasNext()) {
	// check whether the output has already been recorded
	outputInfo nextOutput = (outputInfo)info.outputs.next();
	if (nextOutput.outputProperty != this) {
	  // output has not been recorded--replace the existing output
	  // with this property and add the constraint to this property's
	  // constraints list
	  info.outputs.set(new outputInfo(owner, this));
	  if (!this.constraints.contains (info.cn))
	    this.constraints.add(info.cn);
	  outputAdded = true;

	  // since this property has not been recorded as an output, there's 
	  // a good chance that this property is being changed unexpectly.
	  // We therefore need to see whether this property is out-of-date,
	  // and if so, mark its dependents invalid
	  // if (this.invalidConstraint == null)
	  //  mark(property.inProgress);
	}
      }
      // we've reached the end of the output list so add this property
      // to the output list and add the constraint to this property's
      // dependents list
      else { 
	info.outputs.add(new outputInfo(owner, this));
  outputAdded = true;
	// skip past this new output
 //	info.outputs.next();

	// since this property has not been recorded as an output, there's 
	// a good chance that this property is being changed unexpectly.
	// We therefore need to see whether this property is out-of-date,
	// and if so, mark its dependents invalid
	// if (this.invalidConstraint == null)
	//  mark(property.inProgress);
      }
    }
    return outputAdded;
  }

  public String toString() {
    return name;
  }

}
