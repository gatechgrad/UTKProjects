package silhouette.shapes;

import java.awt.*;
import java.awt.geom.*;
import java.awt.font.*;
import silhouette.constraints.*;
import java.util.Vector;
import java.lang.*;

/**
 * TextShape is a non-editable line of text drawn on the screen. In
 * addition to the normal properties of a Silhouette BoxShape, a Text
 * Shape also has the following properties:
 * <p>
 * <ol>
 * <li> Text: the string to be displayed.
 * <li> Font: the font in which the string will be drawn.
 * </ol>
 */
public class TextShape extends BoxShape {

  /**
   * A default plain-style font
   */
  protected static Font defaultFont = new Font("Lucida Sans Typewriter",
					       Font.PLAIN, 12);

  /**
   * A font render context for computing font measurements such as width
   * and height
   */
  protected static FontRenderContext fontStats;

  /**
   * The text string to be drawn.
   */
  public  stringProperty text = new stringProperty("text", "", this);

  /**
   * The font in which the string will be drawn.
   */
  public  fontProperty font = new fontProperty("font", defaultFont, this);

    {
      setFilled(false);
    }

  static {
    Toolkit tk = Toolkit.getDefaultToolkit();
    AffineTransform transform = new AffineTransform();
    transform.setToScale(tk.getScreenResolution() / 72,
			 tk.getScreenResolution() / 72);
    fontStats = new FontRenderContext(transform, false, false);
  }

  /**
   * Constructs a new TextShape object with an empty string and a default font
   */
  public TextShape() {}

  /**
   * Constructs a new TextShape object with the specified parameters.
   * @param x_in 	   the x coordinate of the border bounding box
   * @param y_in 	   the y coordinate of the border bounding box
   * @param text_in	   the string to be displayed
   * @param font_in	   the font in which the string will be drawn
   */

  public TextShape(int x_in, int y_in, String text_in, Font font_in) {
    setText(text_in);
    setLeft(x_in);
    setTop(y_in);
    setFont(font_in);
  }

  /**
   * Constructs a new TextShape object with the specified parameters.
   * Default font is the current system font.
   * @param x_in 	   the x coordinate of the border bounding box
   * @param y_in 	   the y coordinate of the border bounding box
   * @param text_in	   the string to be displayed
   */
  public TextShape(int x_in, int y_in, String text_in) {
    this(x_in, y_in, text_in, defaultFont);
  }

  /* Weizhong access properties */
/*  public SilProperty getTextProperty() {
    return text;
  }

  public SilProperty getFontProperty() {
    return font;
  }*/

    public SilShape setWidth(double w) {
	System.out.println("Warning: You cannot explicitly set the width of a TextShape");
	System.out.println("    Its width is computed automatically as a function of its text value");
	System.out.println("    and the font");
	return this;
    }

    public SilShape setHeight(double h) {
	System.out.println("Warning: You cannot explicitly set the height of a TextShape");
	System.out.println("    Its height is computed automatically as a function of its text value");
	System.out.println("    and the font");
	return this;
    }

  /**
   * Returns the width of the text shape. If the width cannot be determined,
   * then 0 is returned. One reason the width might not be determinable is
   * because the text shape has not yet been added to a canvas or the canvas
   * has not yet been displayed.
   */
  public double getWidth() {
    if (TextShape.fontStats == null) {
      System.out.println("TextShape is null");
      // maybe throw an exception in the future?
      return 0;
    }
    else {
      Font fontValue = (Font)font.getValue();
      Font fontToSize = (fontValue == null ? defaultFont : fontValue);
      Rectangle2D bounds
        = fontToSize.getStringBounds(getText(), TextShape.fontStats);
      if (bounds==null) System.out.println("stringBounds is null");	
      width.setValueQuickly(bounds.getWidth());
      return bounds.getWidth();
    }
  }

  /*
   * Returns the height of the text shape. If the height cannot be determined,
   * then 0 is returned. One reason the height might not be determinable is
   * because the text shape has not yet been added to a canvas or the canvas
   * has not yet been displayed.
   */
  public double getHeight() {
    if (TextShape.fontStats == null)
      // maybe throw an exception in the future?
      return 0;
    else {
      Font fontValue = (Font)font.getValue();
      Font fontToSize = (fontValue == null ? defaultFont : fontValue);
//      Rectangle2D bounds = fontToSize.getStringBounds(text, TextShape.fontStats);
//      return bounds.getHeight();
      double h = fontToSize.getLineMetrics(getText(), fontStats).getHeight ();
      height.setValueQuickly(h);
      return h;
    }
  }

  /**
   * Paints a text shape to the screen. This method should never be called
   * directly by an application. To get a text shape to appear on the
   * screen, either add it to a Silhouette canvas or to a composite shape
   * that has been added to a Silhouette canvas.
   */
  public void draw(Graphics2D g) {
    if(getVisible()) {
      Font fontValue = (Font)font.getValue();
      Font fontToDraw = (fontValue == null ? defaultFont : fontValue);
      if(getFilled()) {
        g.setColor(getFillColor());
        g.fillRect((int)getLeft(), (int)getTop(),
		   (int)getWidth(), (int)getHeight());
      }
      g.setColor(getLineColor());
      g.setFont(fontToDraw);

      float ascent = fontToDraw.getLineMetrics(getText(), fontStats).getAscent();
      g.drawString(getText(), (int)getLeft(), (int)(getTop() + ascent));
      validate();
    }
  }

  /**
   * Sets the fontStats variable. This method is ordinarily called by
   * a canvas's paint method and should not have to be called directly
   * by the application.
   */
  public static FontRenderContext setFontStats(FontRenderContext contextIn) {
    TextShape.fontStats = contextIn;
    return contextIn;
  }

  /**
   * Changes the default font in which a text string is drawn if
   * the text object is created without a font
   */
  public static Font setDefaultFont(Font font_in) {
    TextShape.defaultFont = font_in;
    return(font_in);
  }

  /**
   * Returns the default font in which a text string is drawn if
   * the text object is created without a font
   */
  public static Font getDefaultFont() {
    return(defaultFont);
  }

  /**
   * Changes the string that is drawn.
   */
  public SilShape setText(String text_in) {
    text.setValue(this, text_in);
    invalidate();

    return(this);
  }

  /**
   * Returns the string that is drawn.
   */
  public String getText() {
    return((String)text.getValue());
  }

  /**
   * Changes the font in which the string is drawn.
   */
  public SilShape setFont(Font font_in) {
    font.setValue(this, font_in);
    invalidate();

    return(this);
  }
  /**
   * Returns the font in which the string is drawn.
   */
  public Font getFont() {
    return((Font)font.getValue());
  }

  /**
   * Reshape in TextShape acts only as move().  It cannot change the
   * width or height.
   */
  /*
  public void reshape(int x_in, int y_in, int width_in, int height_in) {
    this.move(x_in, y_in);
  }
  */

  /* Add Fields for reflect usage */
  public static Vector Fields           = new Vector(10);

  static {
    Fields.addElement("Top");
    Fields.addElement("Left");
    Fields.addElement("Height");
    Fields.addElement("Width");
    Fields.addElement("Visible");
    Fields.addElement("LineColor");
    Fields.addElement("FillColor");
    Fields.addElement("Filled");
    Fields.addElement("Font");
    Fields.addElement("Text");
  }

}
