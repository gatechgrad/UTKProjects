
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Jan 31 22:47:35 EST 2002
//----------------------------------------------------

package silhouette.language;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Thu Jan 31 22:47:35 EST 2002
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\034\004\000\002\002\004\000\002\003" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\004" +
    "\000\002\005\005\000\002\006\004\000\002\006\003\000" +
    "\002\007\005\000\002\007\007\000\002\004\011\000\002" +
    "\004\012\000\002\004\011\000\002\004\012\000\002\004" +
    "\013\000\002\004\014\000\002\012\005\000\002\012\004" +
    "\000\002\013\002\000\002\013\003\000\002\013\003\000" +
    "\002\013\004\000\002\014\003\000\002\014\004\000\002" +
    "\015\006\000\002\016\003\000\002\016\004\000\002\017" +
    "\007\000\002\017\005\000\002\017\010\000\002\017\006" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\004\000\002\021\004\000\002" +
    "\021\004\000\002\021\004\000\002\021\004\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\004\000\002\026\004\000\002" +
    "\026\003\000\002\027\003\000\002\027\004\000\002\032" +
    "\003\000\002\032\004\000\002\030\002\000\002\030\003" +
    "\000\002\030\005\000\002\031\003\000\002\031\004\000" +
    "\002\022\002\000\002\022\004\000\002\023\011\000\002" +
    "\023\013\000\002\023\011\000\002\024\005\000\002\033" +
    "\003\000\002\033\004\000\002\010\003\000\002\010\003" +
    "\000\002\011\003\000\002\011\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\016\013\006\014\004\015\uffff\021\uffff\022" +
    "\uffff\023\uffff\001\002\000\006\054\020\055\230\001\002" +
    "\000\012\015\024\021\025\022\022\023\027\001\002\000" +
    "\006\054\020\055\017\001\002\000\004\002\015\001\002" +
    "\000\014\014\ufff9\015\ufff9\021\ufff9\022\ufff9\023\ufff9\001" +
    "\002\000\014\014\004\015\ufffe\021\ufffe\022\ufffe\023\ufffe" +
    "\001\002\000\014\014\004\015\ufffd\021\ufffd\022\ufffd\023" +
    "\ufffd\001\002\000\014\014\ufffa\015\ufffa\021\ufffa\022\ufffa" +
    "\023\ufffa\001\002\000\014\014\004\015\ufffc\021\ufffc\022" +
    "\ufffc\023\ufffc\001\002\000\004\002\000\001\002\000\004" +
    "\012\021\001\002\000\014\004\uffae\011\uffae\012\uffae\042" +
    "\uffae\054\uffae\001\002\000\014\004\uffaf\011\uffaf\012\uffaf" +
    "\042\uffaf\054\uffaf\001\002\000\014\014\ufffb\015\ufffb\021" +
    "\ufffb\022\ufffb\023\ufffb\001\002\000\034\015\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\054\uffd3\055\uffd3\001\002\000\004" +
    "\002\001\001\002\000\004\054\207\001\002\000\034\015" +
    "\uffd4\016\uffd4\017\uffd4\020\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\032\uffd4\054\uffd4\055\uffd4\001" +
    "\002\000\004\015\030\001\002\000\034\015\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\054\uffd2\055\uffd2\001\002\000\004" +
    "\054\031\001\002\000\006\041\032\042\033\001\002\000" +
    "\006\054\020\055\017\001\002\000\006\054\020\055\017" +
    "\001\002\000\006\004\uffad\011\uffad\001\002\000\006\004" +
    "\037\011\036\001\002\000\006\054\020\055\017\001\002" +
    "\000\046\005\uffee\016\053\017\042\020\062\021\025\022" +
    "\022\023\027\024\043\025\041\026\056\027\064\030\054" +
    "\031\045\032\055\040\uffee\043\uffee\054\047\055\017\001" +
    "\002\000\046\005\uffed\016\053\017\042\020\062\021\025" +
    "\022\022\023\027\024\043\025\041\026\056\027\064\030" +
    "\054\031\045\032\055\040\uffed\043\uffed\054\047\055\017" +
    "\001\002\000\004\054\uffd0\001\002\000\024\024\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\054\uffdf" +
    "\055\uffdf\001\002\000\004\054\uffd1\001\002\000\046\005" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\040\uffe7\043\uffe7\054\uffe7\055\uffe7\001\002\000\004" +
    "\054\uffcc\001\002\000\004\054\uffca\001\002\000\006\006" +
    "\170\054\uffaf\001\002\000\004\005\167\001\002\000\046" +
    "\005\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023" +
    "\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea" +
    "\032\uffea\040\uffea\043\uffea\054\uffea\055\uffea\001\002\000" +
    "\004\054\162\001\002\000\030\017\160\020\157\024\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\054" +
    "\uffe0\055\uffe0\001\002\000\004\054\uffcd\001\002\000\004" +
    "\054\uffcb\001\002\000\004\054\uffcf\001\002\000\024\024" +
    "\043\025\041\026\056\027\064\030\054\031\045\032\055" +
    "\054\020\055\017\001\002\000\046\005\uffec\016\053\017" +
    "\042\020\062\021\025\022\022\023\027\024\043\025\041" +
    "\026\056\027\064\030\054\031\045\032\055\040\uffec\043" +
    "\uffec\054\020\055\017\001\002\000\032\016\116\017\120" +
    "\020\117\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\054\uffe1\055\uffe1\001\002\000\024\024\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\054" +
    "\uffde\055\uffde\001\002\000\010\005\uffb7\040\uffb7\043\uffb7" +
    "\001\002\000\004\054\uffce\001\002\000\010\005\uffef\040" +
    "\071\043\070\001\002\000\010\005\uffb6\040\uffb6\043\uffb6" +
    "\001\002\000\004\005\ufff0\001\002\000\004\045\112\001" +
    "\002\000\004\054\072\001\002\000\006\041\073\042\074" +
    "\001\002\000\006\054\020\055\017\001\002\000\006\054" +
    "\020\055\017\001\002\000\006\004\076\011\036\001\002" +
    "\000\046\005\uffee\016\053\017\042\020\062\021\025\022" +
    "\022\023\027\024\043\025\041\026\056\027\064\030\054" +
    "\031\045\032\055\040\uffee\043\uffee\054\047\055\017\001" +
    "\002\000\004\005\100\001\002\000\010\005\uffb3\040\uffb3" +
    "\043\uffb3\001\002\000\006\004\102\042\103\001\002\000" +
    "\046\005\uffee\016\053\017\042\020\062\021\025\022\022" +
    "\023\027\024\043\025\041\026\056\027\064\030\054\031" +
    "\045\032\055\040\uffee\043\uffee\054\047\055\017\001\002" +
    "\000\006\054\020\055\017\001\002\000\006\004\105\011" +
    "\036\001\002\000\046\005\uffee\016\053\017\042\020\062" +
    "\021\025\022\022\023\027\024\043\025\041\026\056\027" +
    "\064\030\054\031\045\032\055\040\uffee\043\uffee\054\047" +
    "\055\017\001\002\000\004\005\107\001\002\000\010\005" +
    "\uffb4\040\uffb4\043\uffb4\001\002\000\004\005\111\001\002" +
    "\000\010\005\uffb5\040\uffb5\043\uffb5\001\002\000\006\044" +
    "\uffb1\045\uffb1\001\002\000\006\044\114\045\115\001\002" +
    "\000\004\005\uffb2\001\002\000\006\044\uffb0\045\uffb0\001" +
    "\002\000\030\017\123\020\122\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\054\uffdd\055\uffdd\001" +
    "\002\000\024\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\032\uffdb\054\uffdb\055\uffdb\001\002\000\026\020" +
    "\121\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\054\uffdc\055\uffdc\001\002\000\024\024\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\054\uffd6" +
    "\055\uffd6\001\002\000\024\024\uffd7\025\uffd7\026\uffd7\027" +
    "\uffd7\030\uffd7\031\uffd7\032\uffd7\054\uffd7\055\uffd7\001\002" +
    "\000\024\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\054\uffd8\055\uffd8\001\002\000\046\005\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\040\uffe6\043\uffe6\054\uffe6\055\uffe6\001\002\000\004\054" +
    "\126\001\002\000\006\006\127\012\130\001\002\000\024" +
    "\033\133\035\135\036\140\046\143\047\132\050\134\051" +
    "\141\052\137\053\131\001\002\000\046\005\uffe2\016\uffe2" +
    "\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\040\uffe2" +
    "\043\uffe2\054\uffe2\055\uffe2\001\002\000\004\012\uffc4\001" +
    "\002\000\004\012\uffc8\001\002\000\004\034\154\001\002" +
    "\000\004\012\uffc7\001\002\000\010\011\uffbc\012\uffbc\037" +
    "\150\001\002\000\006\012\uffc1\036\145\001\002\000\004" +
    "\012\uffc5\001\002\000\006\012\uffc0\036\uffc0\001\002\000" +
    "\004\012\uffc6\001\002\000\004\012\144\001\002\000\004" +
    "\012\uffc9\001\002\000\046\005\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\040\uffe3\043\uffe3\054" +
    "\uffe3\055\uffe3\001\002\000\006\012\uffbf\036\uffbf\001\002" +
    "\000\006\011\152\012\uffc2\001\002\000\010\011\uffbb\012" +
    "\uffbb\037\151\001\002\000\010\011\uffb9\012\uffb9\037\uffb9" +
    "\001\002\000\010\011\uffb8\012\uffb8\037\uffb8\001\002\000" +
    "\004\037\150\001\002\000\010\011\uffba\012\uffba\037\151" +
    "\001\002\000\006\012\uffbe\034\uffbe\001\002\000\006\012" +
    "\uffc3\034\156\001\002\000\006\012\uffbd\034\uffbd\001\002" +
    "\000\024\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\054\uffd9\055\uffd9\001\002\000\026\020\161" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\054\uffda\055\uffda\001\002\000\024\024\uffd5\025\uffd5" +
    "\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\054\uffd5\055" +
    "\uffd5\001\002\000\006\006\163\012\164\001\002\000\024" +
    "\033\133\035\135\036\140\046\143\047\132\050\134\051" +
    "\141\052\137\053\131\001\002\000\046\005\uffe4\016\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\040\uffe4" +
    "\043\uffe4\054\uffe4\055\uffe4\001\002\000\004\012\166\001" +
    "\002\000\046\005\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\040\uffe5\043\uffe5\054\uffe5\055\uffe5" +
    "\001\002\000\004\002\ufff3\001\002\000\024\033\133\035" +
    "\135\036\140\046\143\047\132\050\134\051\141\052\137" +
    "\053\131\001\002\000\004\012\172\001\002\000\046\005" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\040\uffe8\043\uffe8\054\uffe8\055\uffe8\001\002\000\046" +
    "\005\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\040\uffe9\043\uffe9\054\uffe9\055\uffe9\001\002\000" +
    "\046\005\uffeb\016\053\017\042\020\062\021\025\022\022" +
    "\023\027\024\043\025\041\026\056\027\064\030\054\031" +
    "\045\032\055\040\uffeb\043\uffeb\054\020\055\017\001\002" +
    "\000\006\004\uffac\011\uffac\001\002\000\006\004\177\042" +
    "\200\001\002\000\046\005\uffee\016\053\017\042\020\062" +
    "\021\025\022\022\023\027\024\043\025\041\026\056\027" +
    "\064\030\054\031\045\032\055\040\uffee\043\uffee\054\047" +
    "\055\017\001\002\000\006\054\020\055\017\001\002\000" +
    "\006\004\202\011\036\001\002\000\046\005\uffee\016\053" +
    "\017\042\020\062\021\025\022\022\023\027\024\043\025" +
    "\041\026\056\027\064\030\054\031\045\032\055\040\uffee" +
    "\043\uffee\054\047\055\017\001\002\000\004\005\204\001" +
    "\002\000\004\002\ufff1\001\002\000\004\005\206\001\002" +
    "\000\004\002\ufff5\001\002\000\006\041\210\042\211\001" +
    "\002\000\006\054\020\055\017\001\002\000\006\054\020" +
    "\055\017\001\002\000\006\004\213\011\036\001\002\000" +
    "\046\005\uffee\016\053\017\042\020\062\021\025\022\022" +
    "\023\027\024\043\025\041\026\056\027\064\030\054\031" +
    "\045\032\055\040\uffee\043\uffee\054\047\055\017\001\002" +
    "\000\004\005\215\001\002\000\004\002\ufff4\001\002\000" +
    "\006\004\217\042\220\001\002\000\046\005\uffee\016\053" +
    "\017\042\020\062\021\025\022\022\023\027\024\043\025" +
    "\041\026\056\027\064\030\054\031\045\032\055\040\uffee" +
    "\043\uffee\054\047\055\017\001\002\000\006\054\020\055" +
    "\017\001\002\000\006\004\222\011\036\001\002\000\046" +
    "\005\uffee\016\053\017\042\020\062\021\025\022\022\023" +
    "\027\024\043\025\041\026\056\027\064\030\054\031\045" +
    "\032\055\040\uffee\043\uffee\054\047\055\017\001\002\000" +
    "\004\005\224\001\002\000\004\002\ufff2\001\002\000\004" +
    "\005\226\001\002\000\004\002\ufff6\001\002\000\004\012" +
    "\234\001\002\000\006\007\231\012\uffae\001\002\000\004" +
    "\010\232\001\002\000\004\012\233\001\002\000\014\014" +
    "\ufff7\015\ufff7\021\ufff7\022\ufff7\023\ufff7\001\002\000\014" +
    "\014\ufff8\015\ufff8\021\ufff8\022\ufff8\023\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\014\003\004\005\010\006\011\007\007\034" +
    "\006\001\001\000\004\010\226\001\001\000\006\004\022" +
    "\020\025\001\001\000\004\010\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\013\007\007\001\001" +
    "\000\004\007\012\001\001\000\002\001\001\000\004\007" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\175\001\001\000\006\010\033" +
    "\011\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\174\001\001\000\026\010\045\012\047\013\062" +
    "\014\037\015\050\016\057\017\043\020\060\021\056\025" +
    "\051\001\001\000\020\010\045\015\172\016\173\017\043" +
    "\020\060\021\056\025\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\045\025\124\001\001\000\014\010\045\017\123" +
    "\020\060\021\056\025\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\064\001\001\000\002\001\001" +
    "\000\006\023\065\024\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\100\001\001\000\006\010" +
    "\033\011\074\001\001\000\002\001\001\000\026\010\045" +
    "\012\076\013\062\014\037\015\050\016\057\017\043\020" +
    "\060\021\056\025\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\010\045\012\107\013" +
    "\062\014\037\015\050\016\057\017\043\020\060\021\056" +
    "\025\051\001\001\000\006\010\033\011\103\001\001\000" +
    "\002\001\001\000\026\010\045\012\105\013\062\014\037" +
    "\015\050\016\057\017\043\020\060\021\056\025\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\141\027\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\154\001\001\000\002\001\001\000\006\030\145\031" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\164\027\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\170" +
    "\027\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\010\045\017\123\020\060\021\056" +
    "\025\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\010\045\012\204\013\062\014\037\015\050\016\057" +
    "\017\043\020\060\021\056\025\051\001\001\000\006\010" +
    "\033\011\200\001\001\000\002\001\001\000\026\010\045" +
    "\012\202\013\062\014\037\015\050\016\057\017\043\020" +
    "\060\021\056\025\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\215\001\001\000\006\010\033\011\211" +
    "\001\001\000\002\001\001\000\026\010\045\012\213\013" +
    "\062\014\037\015\050\016\057\017\043\020\060\021\056" +
    "\025\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\010\045\012\224\013\062\014\037" +
    "\015\050\016\057\017\043\020\060\021\056\025\051\001" +
    "\001\000\006\010\033\011\220\001\001\000\002\001\001" +
    "\000\026\010\045\012\222\013\062\014\037\015\050\016" +
    "\057\017\043\020\060\021\056\025\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  /** Report a non fatal error (or warning).  This method takes a message
   *  string and an additional object (to be used by specializations
   *  implemented in subclasses).  Here in the base class a very simple
   *  implementation is provided which simply prints the message to
   *  System.err.
   *
   * @param message an error message.
   * @param info    an extra object reserved for use by specialized subclasses.
   */
  public void report_error(String message, Object info)
    {
      System.err.print(message);
      if (info instanceof Symbol)
        if (((Symbol)info).left != -1)
        System.err.println(" on line " + ((Symbol)info).left);
        else System.err.println("");
      else System.err.println("");
    }

  /*. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .*/

  /** This method is called when a syntax error has been detected and recovery
   *  is about to be invoked.  Here in the base class we just emit a
   *  "Syntax error" error message.
   *
   * @param cur_token the current lookahead Symbol.
   */
  public void syntax_error(Symbol cur_token)
    {
      report_error("Syntax error", cur_token);
      System.err.println("Couldn't repair and continue parse");
      System.exit(0);
    }


  public static void main(String args[]) throws Exception {
    // check the command line
    if(args.length != 1) {
      System.out.println("usage: parser inputfile\n");
      System.exit(1);
    }

    FileInputStream stream = new FileInputStream(args[0]);
    // new parser(new Yylex(stream)).parse();

    System.out.println("begin parsing");
    new parser(new Yylex(stream)).parse();
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



  /* variables */
  FileOutputStream outStream;
  PrintWriter writer;
  String fileName;

  String packageName;
  Vector importNames = new Vector();

  PartClass silObject;

  int size;
  String s;
  String id;

  /**
   * Method --- generateCode
   */
  public void generateCode() throws IOException {

    /* creat the file */
    outStream = new FileOutputStream(fileName);
    writer = new PrintWriter(outStream);

    /* write the comments */
    writer.println("// " + new Date());
    writer.println("// the following code is automatically generately from the parser");
    writer.println();

    /* package statement */
    if(packageName != null) {
      writer.println("package " + packageName + ";");
      writer.println();
    }

    /* import statements */
    writer.println("import silhouette.shapes.*;");
    writer.println("import silhouette.constraints.*;");
    size = importNames.size();
    for(int i = 0; i < size; i++) {
      writer.println("import " + (String) importNames.elementAt(i) + ";");
    }
    writer.println();

    /* class declaration */
    generateClass(silObject, 0);
    //displayTree(silObject);

    writer.close();

  }


  /**
   * method -- generateClass
   *           genearate the class declaration
   **/
  public void generateClass(PartClass p, int spaces) {
    for(int j = 0; j < spaces; j++) writer.print("\t");
    //if(p.superClass.equals("CompositeShape")) {
    if(p.isTopLevel) {
      s = p.name;
      p.top = p;	// define the top class
    } else {
      s = "_" + p.name;
    }
    // implements interfaces
    String interfaceStr = new String();
    if(p.superClass != null) {
      interfaceStr = " extends " + p.superClass;
    }
    if(p.interfaceList != null) {
      interfaceStr = interfaceStr + " implements " + p.interfaceList;
    }
    writer.print(p.access + "class " + s + interfaceStr + " {\n");
    writer.flush();

    Contents contents = p.contents;
    PropertiesClass properties = contents.properties;
    Vector parts = contents.parts;
    MethodsClass methods = contents.methods;
    Vector nproperties = null;
    if(properties != null) {
      nproperties = properties.nProperties;
    }

    /* declaration of new properties */
    if(properties != null && nproperties != null) {
      size = nproperties.size();

      // comments 
      if(size > 0) {
        for(int j = 0; j <= spaces; j++) writer.print("\t");
        writer.print("/* declaration of new properties */\n");
        writer.flush();
      }

      // declaration, add the property to the table
      for(int i = 0; i < size; i++) {
        NewPropertyClass nproperty = (NewPropertyClass) nproperties.elementAt(i);
        String s2 = getProperty(nproperty.type);
        String s3;

        // add the property to the table
        if(!(p.table.containsKey(nproperty.id))) {
          p.table.put(nproperty.id, new String("get"+upperCaseFirstChar(nproperty.id)+"()"));
        }

        if(nproperty.value != null && nproperty.value.valueType == 0) {
          s3 = (String) nproperty.value.value;
        } else {
          s3 = getDefaultValue(nproperty.type);
        }
        String s4 = new String();
        if(nproperty.accessStaticR != null && nproperty.accessStaticR.isStatic) {
          s4 = "static ";
        }
        if(nproperty.accessStaticR != null && nproperty.accessStaticR.isFinal) {
          s4 = s4 + "final ";
        }
        s = "protected "+s4 + s2+" "+nproperty.id +" = new "+s2+"(\""+nproperty.id+"\", "+s3+", this);";
        for(int j = 0; j <= spaces; j++) writer.print("\t");
        writer.print(s+"\n");
        writer.flush();
      }

      if(size > 0) {
        writer.println();
      }

    }

    /* declaration of the parts, define part's parent, add parts to table */
    if(parts != null) {
      size = parts.size();
      if(size > 0) {
        for(int i = 0; i <= spaces; i++) writer.print("\t");
        writer.print("/* declaration of the parts */\n");
      }
      for(int i = 0; i < size; i++) {
        PartClass part = (PartClass) parts.elementAt(i);

        for(int j = 0; j <= spaces; j++) writer.print("\t");
        writer.print("protected " + part.superClass + " " + part.name + ";\n");
        writer.flush();

        // define part's parent
        part.parent = p.name;

        // define part's top
        part.top = p.top;

        // add parts to the table
        if( !(p.table.containsKey(part.name)) ) {
          p.table.put(part.name, new String("get" + upperCaseFirstChar(part.name) + "()"));
//System.out.println("add " + part.name + " in the table");
        }
      }
      if(size > 0) writer.println();
    }

    /* get and set Accessors of new properties */
    if(properties != null && nproperties != null) {
      size = nproperties.size();

      // comments
      if(size > 0) {
        for(int j = 0; j <= spaces; j++) writer.print("\t");
        writer.print("/* get(set) accessors of new properties */\n");
        writer.flush();
      }

      // get accessors, set accessors
      for(int i = 0; i < size; i++) {
        NewPropertyClass nproperty = (NewPropertyClass) nproperties.elementAt(i);
        AccessStaticReadOnlyClass asr = (AccessStaticReadOnlyClass) nproperty.accessStaticR;
        // get accessor
        String s2 = upperCaseFirstChar(nproperty.id);
        String s3 = new String();
        if(asr != null) {
          if(asr.access != null) s3 = asr.access + " ";
          if(asr.isStatic) s3 = s3 + "static ";
        }

        s = s3 + nproperty.type + " get" + s2 + "() {";
        for(int j = 0; j <= spaces; j++) writer.print("\t");
        writer.print(s + "\n");
        writer.flush();

        if(isObjType(nproperty.type)) {
          id = " (" + nproperty.type  + ") ";
        } else {
          id = new String();
        }
        s = "return " + id + nproperty.id + ".getValue();";
        for(int j = 0; j <= spaces; j++) writer.print("\t");
        writer.print("\t" + s + "\n");
        writer.flush();

        for(int j = 0; j <= spaces; j++) writer.print("\t");
        writer.print("}\n");
        writer.flush();

        //set accessor
        if(asr != null && asr.readOnly) {
          s3 = "protected ";
        } else if(asr != null && asr.access != null) {
          s3 = asr.access + " ";
        } else {
          s3 = new String();
        }

        if(asr != null && asr.isStatic) {
          s2 = "static void ";
        } else {
          s2 = "SilShape ";
        }

        String s1 = upperCaseFirstChar(nproperty.id);
        s = s3 + s2 + "set" + s1 + "(" + nproperty.type + " new" + s1 + ") {";
        for(int j = 0; j <= spaces; j++) writer.print("\t");
        writer.print(s + "\n");

        for(int j = 0; j <= spaces; j++) writer.print("\t");
        writer.print("\t" + nproperty.id + ".setValue(this, new" + s1 + ");\n");

        if(asr == null || (asr != null && !(asr.isStatic))) {
          for(int j = 0; j <= spaces; j++) writer.print("\t");
          writer.print("\treturn this;\n");
        }

        for(int j = 0; j <= spaces; j++) writer.print("\t");
        writer.print("}\n");
        writer.flush();


        writer.println();

      }

      if(size > 0) {
        writer.println();
      }
    }

    /* get accessors of the parts */
    if(parts != null) {
      size = parts.size();
      if(size > 0) {
        for(int i = 0; i <= spaces; i++) writer.print("\t");
        writer.print("/* get accessors of the parts */\n");
      }
      for(int i = 0; i < size; i++) {
        PartClass part = (PartClass) parts.elementAt(i);

        // get accessor
        for(int j = 0; j <= spaces; j++) writer.print("\t");
	String s = part.name.toUpperCase();
        s = new String(s.charAt(0) + part.name.substring(1));
        writer.print("protected " + part.superClass + " get" + s + "() {\n");
        for(int j = 0; j <= spaces; j++) writer.print("\t");
        writer.print("\treturn " + part.name + ";\n");
        for(int j = 0; j <= spaces; j++) writer.print("\t");
        writer.print("}\n");
        writer.flush();
      }
      if(size > 0) writer.println();
    }


    /* for Parts, recursive call generateClass to generate the inner class */
    if(parts != null) {
      int psize = parts.size();
      //System.out.println("parts.size: " + psize);
      for(int i = 0; i < psize; i++) {
        PartClass part = (PartClass) parts.elementAt(i);
        //System.out.println("generate inner class: " + part.name);
        //System.out.println("before calling, parts.size: " + psize);
        generateClass(part, spaces+1);
        //System.out.println("after calling, parts.size: " + psize);
        writer.println();
      }
    }


    /* beginning of initial block */
    for(int i = 0; i <= spaces; i++) writer.print("\t");
    writer.print("/* initial block */\n");
    for(int i = 0; i <= spaces; i++) writer.print("\t");
    writer.print("{\n");
    writer.flush();

    /* add pre-defined properties to table(can do this since after here table is used)
     * initialize the pre-defined properties */
    Vector pproperties;
    if(properties != null && (pproperties =  properties.pProperties) != null) {
      size = pproperties.size();
      if(size > 0) {
        for(int i = 0; i <= spaces+1; i++) writer.print("\t");
        writer.print("// initialize the pre-defined properties\n");
        writer.flush();
      }

      // add pre-defined properties to the table
/*
      for(int i =0; i < size; i++) {
        PPropertyClass pProperty = (PPropertyClass) pproperties.elementAt(i);
        if( !(p.top.table.containsKey(pProperty.id)) ) {
          p.top.table.put(pProperty.id, new String("get"+upperCaseFirstChar(pProperty.id)+"()"));
System.out.println("add "+pProperty.id+" into table, "+new String("get"+upperCaseFirstChar(pProperty.id)+"()"));
        }
      }
*/

      // debug: print out the table
      System.out.println("debug className: " + p.name);
      if ( !(p.table.isEmpty()) ) {
        Iterator keys = (Iterator) p.table.keys();
        for ( ; keys.hasNext(); ) {
          System.out.println( (String) keys.next() );
       }
      }

      // output the symbol table to the file
      if( !(p.table.isEmpty()) ) {
        try {
          FileOutputStream outStream = new FileOutputStream(p.name + ".sym");
          PrintWriter writer = new PrintWriter(outStream);
          Iterator keys = (Iterator) p.table.keys();
          for( ; keys.hasNext(); ) {
            String key = (String) keys.next();
            writer.println( "\"" + key + "\" \"" + p.table.get(key) + "\"");
            writer.flush();
          }
          writer.close();
        }
        catch (IOException e) {
          System.out.println(e);
        }
      }

      // initialize the pre-defined properties
      for(int i = 0; i < size; i++) {
        PPropertyClass pProperty = (PPropertyClass) pproperties.elementAt(i);
        ValueClass v = pProperty.value;
        switch(v.valueType) {
        case 0:
          for(int j = 0; j <= spaces+1; j++) writer.print("\t");
          s = upperCaseFirstChar(pProperty.id);
          writer.print("set" + s + "(" + (String) v.value + ");\n");
          writer.flush();
          break;

        case 1:		// formula
	  for(int j = 0; j <= spaces+1; j++) writer.print("\t");
	  writer.print("addConstraint( new constraint () {\n");
          writer.flush();

	  for(int j = 0; j <= spaces+1; j++) writer.print("\t");
	  writer.print("\tpublic void formula(constrainedObject self) {\n");
          writer.flush();

          s = upperCaseFirstChar(pProperty.id);
	  for(int j = 0; j <= spaces+1; j++) writer.print("\t");
          String s4 = convertString((Vector) v.value, p.table);
          String s2 = "set" + s + "(" + s4 + ");";
//System.out.println("debug s2: " + s2);
          String s3 = replaceGetParent(s2, p.parent);
//System.out.println("debug: " + s3 + "\n");
          writer.print("\t\t" + s3 + "\n");
	  //writer.print("\t\tset" + s + "(" + v.value + ");\n");
          writer.flush();

	  for(int j = 0; j <= spaces+1; j++) writer.print("\t");
	  writer.print("\t}\n");
          writer.flush();

	  for(int j = 0; j <= spaces+1; j++) writer.print("\t");
	  writer.print("});\n");
          writer.flush();

	  break;

        case 2:		// pFormula
	  for(int j = 0; j <= spaces+1; j++) writer.print("\t");
          /* s = replaceGetParent((String)v.value, p.parent);
          writer.print(s + "\n"); */
	  writer.print(v.value + "\n");
          writer.flush();
	  break;
        }
      }

      if(size > 0) writer.println();
    }

    
    /* add constaints of new properties to initial block*/
    if(properties != null && nproperties != null) {
      size = nproperties.size();
      boolean comment = true;

      for(int i = 0; i < size; i++) {
        NewPropertyClass nproperty = (NewPropertyClass) nproperties.elementAt(i);
        ValueClass v = nproperty.value;

        if(v != null && v.valueType == 1) {	// formula
          if(comment) {
            for(int j = 0; j <= spaces+1; j++) writer.print("\t");
            writer.print("// add constraints of new properties\n");
            writer.flush();
            comment = false;
          }

          for(int j = 0; j <= spaces+1; j++) writer.print("\t");
          writer.print("addConstraint( new constraint () {\n");

          for(int j = 0; j <= spaces+1; j++) writer.print("\t");
          writer.print("\tpublic void formula(constrainedObject self) {\n");

          s = upperCaseFirstChar(nproperty.id);
          for(int j = 0; j <= spaces+1; j++) writer.print("\t");
          String s4 = convertString((Vector) v.value, p.table);
          String s2 = "set" + s + "(" + s4 + ");";
          String s3 = replaceGetParent(s2, p.parent);
          writer.print("\t\t" + s3 + "\n");
          //writer.print("\t\tset" + s + "(" + v.value + ");\n");

          for(int j = 0; j <= spaces+1; j++) writer.print("\t");
          writer.print("\t}\n");

          for(int j = 0; j <= spaces+1; j++) writer.print("\t");
          writer.print("});\n");
          writer.flush();
        }

        if(v != null && v.valueType == 2) {	// pformula
          if(comment) {
            for(int j = 0; j <= spaces+1; j++) writer.print("\t");
            writer.print("// add constraints of new properties");
            comment = false;
          }

          for(int j = 0; j <= spaces+1; j++) writer.print("\t");
          /*s = replaceGetParent((String)v.value, p.parent);
          writer.print(s + "\n");*/
          writer.print(v.value + "\n");
          writer.flush();
        }

      }

      writer.println();
    }

    /* create and add part to the composite shape in initialization block */
    if(parts != null) {
      size = parts.size();
      if(size > 0) {
        for(int i = 0; i <= spaces+1; i++) writer.print("\t");
        writer.print("/* create and add part to the composite shape in initialization block*/\n");
      }
      for(int i = 0; i < size; i++) {
        PartClass part = (PartClass) parts.elementAt(i);

        for(int j = 0; j <= spaces+1; j++) writer.print("\t");
        writer.print(part.name + " = new _" + part.name + "();\n");

        for(int j = 0; j <= spaces+1; j++) writer.print("\t");
        writer.print("add(" + part.name + ", \"" + part.name + "\");\n");

        for(int j = 0; j <= spaces+1; j++) writer.print("\t");
        writer.print(part.name + ".setParent(this);\n");
        writer.println();
      }
    }


    /* end of initial block */
    for(int i = 0; i <= spaces; i++) writer.print("\t");
    writer.print("}	// end of initial block\n");
    writer.println();
    writer.flush();

    /* Methods */
    if(methods != null && methods.code != null) {
      for(int i = 0; i <= spaces; i++) {
        writer.print("\t");
      }
      writer.print("/* user code provided by user between \"begin java\" and \"end java\" statements */\n");
      writer.println(methods.code);
    }


    /* end of the class */
    writer.println();
    for(int i = 0; i < spaces; i++) {
      writer.print("\t");
    }
    writer.print("}\n");
  }

  /**
   * Method --- String getProperty(String type)
   * return silhouetteproperty according the type
   */
  String getProperty(String type) {
    if(type.equals("boolean")) {
      return new String("booleanProperty");
    }

    if(type.equals("double") || type.equals("float")) {
      return new String("doubleProperty");
    }

    if(type.equals("int") || type.equals("long")) {
      return new String("intProperty");
    }

    if(type.equals("string") || type.equals("char")) {
      return new String("stringProperty");
    }

    return new String("objectProperty");
  }

  /**
   * Method --- getDefaultValue(String type)
   */
  String getDefaultValue(String type) {
    if(type.equals("int") || type.equals("long")) {
      return new String("0");
    }

    if(type.equals("double") || type.equals("float")) {
      return new String("0.0");
    }

    if(type.equals("string") ) {
      return new String();
    }

    if(type.equals("char")) {
      return new String("a");
    }

    if(type.equals("boolean")) {
      return new String("true");
    }

    return new String("null");

  }

  /**
   * Method -- upperCaseFirstChar(String s)
   */
  String upperCaseFirstChar(String s) {
    String s2 = s.toUpperCase();
    return new String(s2.charAt(0) + s.substring(1));
  }

  /**
   *  Method --- isObjType(String type)
   */
  boolean isObjType(String type) {
    if(type.equals("int")) return false;
    if(type.equals("long")) return false;
    if(type.equals("float")) return false;
    if(type.equals("double")) return false;
    if(type.equals("boolean")) return false;
    if(type.equals("char")) return false;
    if(type.equals("string")) return false;

    return true;
  }

  /**
   * Method --- replaceGetParent(String s, String type)
   */
  String replaceGetParent(String str1, String type) {
    //System.out.println("debug replaceParent, str1 : " + str1);
    //System.out.println("debug replaceParent, type : " + type);
    // find all the indices of getParent()
    String str = new String();
    String s = str1;
    String s2 = "getParent()";
    int index = s.indexOf(s2);
    while(index > 0) {
      str = str + s.substring(0, index) + " ((" + type + ") getParent())";
      String s1 = s.substring(index + s2.length());
      s = s1;
      index = s.indexOf(s2);
    }

    str = str + s;

    //System.out.println(str);
    return str;
  }

  /**
   * Method -- initializeTable()
   *   initialize hash table which store the identifiers needing converted in formula
   */
/*
  void initializeTable(Hashtable table) {
    table.put("parent", "getParent()");
    table.put("left", "getLeft()");
    table.put("top", "getTop()");
    table.put("width", "getWidth()");
    table.put("height", "getHeight()");
    table.put("x1", "getX1()");
    table.put("x2", "getX2()");
    table.put("y1", "getY1()");
    table.put("y2", "getY2()");
    table.put("visible", "getVisible()");
    table.put("fillColor", "getFillColor()");
    table.put("lineColor", "getLineColor()");
    table.put("text", "getText()");
    table.put("font", "getFont()");
  }
*/

  /**
   * Method --- initializeTable(PartClass class, String supClassTable)
   * Parameter:
   *	table: the table will be initialized
   *	supClassTable: the file of supper class's sybmol table
   * Description:
   *	find the class path.
   *	find the symbol table file of the supper class in the class directories
   *	inport the symbol to the table
   **/
  void initializeTable (PartClass partClass, String fileName)
  {
    // every table has parent key
    Hashtable table = partClass.table;
    table.put( "parent" , "getParent()");

    // if the supper class is CompositeShape, it's the root
    if( fileName.equals("CompositeShape")) {
      return;
    }

    // get the class path
    String classPath = System.getProperty("java.class.path", ".");
    //System.out.println( "debug: " + classPath);

    // parse the class path
    Vector dirs = new Vector();
    int index = classPath.indexOf(':');
    while(index > 0) {
      dirs.addElement ( classPath.substring (0, index) );
      classPath = classPath.substring(index + 1);
      index = classPath.indexOf(':');
    }
    dirs.addElement(classPath);

    // debug: printout the directories
/*
    int size = dirs.size();
    for(int i = 0; i < size; i++) {
      String dir = (String) dirs.elementAt(i);
      System.out.println(dir);
    }
*/

    /* find the file and import to the table */
    String inFile = fileName + ".sym";
    //System.out.println("debug fileName: " + inFile);
    int size = dirs.size();
    boolean fileExist = false;
    for( int i = 0; i < size; i++) {
      String dir = (String) dirs.elementAt(i);
      File f;
      if (dir.equals(".")) {
        f = new File(inFile);
      } else {
        f = new File(dir, inFile);
      }

      //System.out.println("debug getPath(): " + f.getPath());
      if(f.exists()) {
        fileExist = true;
        try {
          FileInputStream stream = new FileInputStream(f);
          InputStreamReader reader = new InputStreamReader(stream);
          StreamTokenizer tokens = new StreamTokenizer(reader);
          tokens.quoteChar( (int) '"');
          //tokens.eolIsSignificant(true);

          // import the symbol file to the table, and write the symbols to the file
          while ( tokens.nextToken() != tokens.TT_EOF) {
            String key = tokens.sval;
            tokens.nextToken(); String value = tokens.sval;
            if( !table.containsKey(key) ) {
              table.put(key, value);
              System.out.println("debug: put in the table: " + key + "  " + value);
            }
          }
        }
        catch (IOException e) {
          System.out.println(e);
        }
        break;
      }

    }

  }

  /**
   * Method -- convertString(Vector v, Hashtable table)
   *   this method is used to convert the identifiers in formula
   * v      -- Vector of ArgumentClass
   * table  -- store the words needed to convert
   */
  String convertString(Vector v, Hashtable table) {
    String s = new String();

    Iterator i = v.iterator();
    for( ; i.hasNext(); ) {
      ArgumentClass a = (ArgumentClass) i.next();
//System.out.println(a.str);

      if(a.isName) { // is Name
        int j = a.str.indexOf(".");
        if(j < 0) {	// identifier
          if(table.containsKey(a.str)) {
            s = s + (String) table.get(a.str);
          } else {
            s = s + a.str;
          }

        } else {	// dottedName
          String s1 = a.str.substring(0, j);
          if(table.containsKey(s1)) {
            //s = s + table.get(s1) + "." + convertGetStr(a.str.substring(j+1));
            /* if the first ID of the dotted name is partName, property name, 
             * convert every part to getName(), 
             */
            s = s + table.get(s1) + ".";
            String s2 = a.str.substring(j+1);
            int index = s2.indexOf(".");
            while(index > 0) {
              s1 = s2.substring(0, index);
              s2 = s2.substring(index+1);
              s = s + "get" + upperCaseFirstChar(s1) + "()" + ".";
              index = s2.indexOf(".");
            }
            s = s + "get" + upperCaseFirstChar(s2) + "()";
          } else { 
            s = s + a.str;
          }
        }

      } else {	// non Name
        s = s + a.str;
      }

    }

//System.out.println("convertStr output: " + s);
    return s;
  }

  /**
   * Method -- convertGetStr(String s)
   *   serve convertString
   *   convert dotted name s to get string, 
   *   like parent.name-->getParent().getName()
   */
  String convertGetStr(String s)
  {
    String s1 = s;
    String str = new String();
    boolean ok = true;

    while(ok) {
      int i = s1.indexOf(".");
      if(i > 0) {
        str = str + "get" + upperCaseFirstChar(s1.substring(0, i)) + "()" + ".";
        s1 = s1.substring(i+1);
      } else {
        ok = false;
      }
    }

    str = str + "get" + upperCaseFirstChar(s1) + "()";

    return str;
  }


  /* definition of the node classes */

  class PartClass {
    boolean isTopLevel;
    String access;
    String superClass;
    String name;
    String parent;
    PartClass top;	// the top_level name, which will be used to keep track of the hash table
    Contents contents;
    Hashtable table;
    String interfaceList = null;	// string to record the names of interfaces
  }

  class Contents {
    PropertiesClass properties;
    Vector parts;
    MethodsClass methods;
  }

  class PropertiesClass {
    Vector pProperties;
    Vector nProperties;
  }

  class PPropertyClass {
    String id;
    ValueClass value;
  }

  class ValueClass {
    int valueType = 0;	// 0: common case, 1: formula, 2: pformula
    Object value;
  }

  class NewPropertyClass {
    String type;
    String id;
    ValueClass value;
    AccessStaticReadOnlyClass accessStaticR;	// add final option
  }

  class AccessStaticReadOnlyClass {
    String access;
    boolean isStatic;
    boolean readOnly;
    boolean isFinal;	// add final option
  }

  class MethodsClass {
    String code;
  }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // InterfaceList ::= InterfaceList COMMA Name 
            {
              String RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = l + ", " + n; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*InterfaceList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // InterfaceList ::= Name 
            {
              String RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = n; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*InterfaceList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Name ::= DOTTEDNAME 
            {
              String RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = n; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Name ::= IDENTIFIER 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // MethodsInputs ::= MethodsInputs METHODSINPUT 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e1 + e2; 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*MethodsInputs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MethodsInputs ::= METHODSINPUT 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*MethodsInputs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Methods ::= BEGIN_JAVA MethodsInputs END_JAVA 
            {
              MethodsClass RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
	  RESULT = new MethodsClass();
	  RESULT.code = e;
	  //System.out.println("Methods"); 
	
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Methods*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Part ::= PART IDENTIFIER IMPLEMENTS InterfaceList LCPAREN ClassContents RCPAREN 
            {
              PartClass RESULT = null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Contents c = (Contents)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          //System.out.println("Part");

          RESULT = new PartClass();
          RESULT.isTopLevel = false;
          RESULT.access = "protected ";
          RESULT.superClass = null;	// no superclass
          RESULT.name = id1;
          RESULT.contents = c;
          RESULT.table = new Hashtable();
          /* initializeTable(RESULT.table); */
	  RESULT.interfaceList = l;	// implements interface
        
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Part ::= PART IDENTIFIER EXTENDS Name IMPLEMENTS InterfaceList LCPAREN ClassContents RCPAREN 
            {
              PartClass RESULT = null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Contents c = (Contents)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          //System.out.println("Part");

          RESULT = new PartClass();
          RESULT.isTopLevel = false;
          RESULT.access = "protected ";
          RESULT.superClass = id2;
          RESULT.name = id1;
          RESULT.contents = c;
          RESULT.table = new Hashtable();
          /* initializeTable(RESULT.table); */
          if( !id2.equals("CompositeShape") ) {	// CompositeShape is root
	    initializeTable(RESULT, id2);
	  }
	  RESULT.interfaceList = l;
        
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Part ::= PART IDENTIFIER EXTENDS Name LCPAREN ClassContents RCPAREN 
            {
              PartClass RESULT = null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Contents c = (Contents)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
	  //System.out.println("Part"); 

	  RESULT = new PartClass();
	  RESULT.isTopLevel = false;
	  RESULT.access = "protected ";
	  RESULT.superClass = id2;
	  RESULT.name = id1;
	  RESULT.contents = c;
	  RESULT.table = new Hashtable();
          /* initializeTable(RESULT.table); */
          if( !id2.equals("CompositeShape") ) {	// CompositeShape is root
	    initializeTable(RESULT, id2);
	  }
	
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Parts ::= Parts Part 
            {
              Vector RESULT = null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector ps = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		PartClass p = (PartClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	  RESULT = ps;
	  RESULT.addElement(p); 
	
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Parts*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Parts ::= 
            {
              Vector RESULT = null;
		 RESULT = new Vector(); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Parts*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Argument ::= Argument ARGUMENTINPUT 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArgumentClass e2 = (ArgumentClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
/*
          if(e2.isName == true) {
            s = e2.str.toUpperCase();
            s = new String(s.charAt(0) + e2.str.substring(1));
            RESULT =  e1 + new String("get" + s + "()");
          } else {
            RESULT = e1 + e2.str;
          }
*/
	  RESULT = e1 + e2.str;
	
              CUP$parser$result = new java_cup.runtime.Symbol(23/*Argument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Argument ::= ARGUMENTINPUT 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArgumentClass e = (ArgumentClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
/*
	  if(e.isName == true) {
	    s = e.str.toUpperCase();
	    s = new String(s.charAt(0) + e.str.substring(1));
	    RESULT =  new String("get" + s + "()");
	  } else {
	    RESULT = e.str;
	  }
*/
	  RESULT = e.str;
	
              CUP$parser$result = new java_cup.runtime.Symbol(23/*Argument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ArgumentList ::= ArgumentList COMMA Argument 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	  RESULT = e1 + ", " + e2;
	
              CUP$parser$result = new java_cup.runtime.Symbol(22/*ArgumentList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ArgumentList ::= Argument 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	  RESULT = e;
	
              CUP$parser$result = new java_cup.runtime.Symbol(22/*ArgumentList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ArgumentList ::= 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*ArgumentList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FormulaInputs ::= FormulaInputs FORMULAINPUT 
            {
              Vector RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector e1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArgumentClass e2 = (ArgumentClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	  RESULT = e1;
	  RESULT.add(e2);
	
              CUP$parser$result = new java_cup.runtime.Symbol(24/*FormulaInputs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FormulaInputs ::= FORMULAINPUT 
            {
              Vector RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArgumentClass e = (ArgumentClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
	  RESULT = new Vector();
	  RESULT.add(e);
	
              CUP$parser$result = new java_cup.runtime.Symbol(24/*FormulaInputs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ValueInputs ::= ValueInputs VALUEINPUT 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e1 + e2; 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*ValueInputs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ValueInputs ::= VALUEINPUT 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*ValueInputs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Value ::= ValueInputs 
            {
              ValueClass RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	  RESULT = new ValueClass();
	  RESULT.valueType = 0;
	  RESULT.value = e;
	
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Value*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Value ::= PFORMULA_NAME ArgumentList 
            {
              ValueClass RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	  RESULT = new ValueClass();
	  RESULT.valueType = 2;

	  /* get rid of PFORMULA and white space charactors */
	  for(int i = 8; i < e1.length(); i++) {
	    if(e1 != " " && e1 != "\t" && e1 != "\n") {
	      id = e1.substring(i);
	      break;
	    }
	  }

	  RESULT.value = "addConstraint(new " + id +  e2 + ");";
	  //System.out.println(RESULT.value);
	
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Value*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Value ::= FORMULA FormulaInputs 
            {
              ValueClass RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector e = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	  RESULT = new ValueClass();
	  RESULT.valueType = 1;
	  RESULT.value = e;
	  //System.out.println(e);
	
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Value*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Value ::= CHARACTER 
            {
              ValueClass RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	  RESULT = new ValueClass();
	  RESULT.valueType = 0;
	  RESULT.value = e;
	
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Value*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Value ::= TEXTSTRING 
            {
              ValueClass RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	  RESULT = new ValueClass();
	  RESULT.valueType = 0;
	  RESULT.value = e;
	
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Value*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Value ::= FALSE 
            {
              ValueClass RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	  RESULT = new ValueClass();
	  RESULT.valueType = 0;
	  RESULT.value = e;
	
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Value*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Value ::= TRUE 
            {
              ValueClass RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	  RESULT = new ValueClass();
	  RESULT.valueType = 0;
	  RESULT.value = e;
	
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Value*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Value ::= REALNUMBER 
            {
              ValueClass RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	  RESULT = new ValueClass();
	  RESULT.valueType = 0;
	  RESULT.value = e;
	
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Value*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Value ::= INTEGERNUMBER 
            {
              ValueClass RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	  RESULT = new ValueClass();
	  RESULT.valueType = 0;
	  RESULT.value = e;
	
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Value*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Type ::= Name 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Type ::= STRING 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Type ::= CHAR 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Type ::= BOOLEAN 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Type ::= DOUBLE 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Type ::= FLOAT 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Type ::= LONG 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Type ::= INT 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Access ::= PRIVATE 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Access*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Access ::= PROTECTED 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Access*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Access ::= PUBLIC 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Access*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // AccessStaticReadOnly ::= STATIC READONLY FINAL 
            {
              AccessStaticReadOnlyClass RESULT = null;
		
	  RESULT = new AccessStaticReadOnlyClass();
	  RESULT.isStatic = true;
	  RESULT.readOnly = true;
	  RESULT.isFinal = true;
	
              CUP$parser$result = new java_cup.runtime.Symbol(15/*AccessStaticReadOnly*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AccessStaticReadOnly ::= Access READONLY FINAL 
            {
              AccessStaticReadOnlyClass RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	  RESULT = new AccessStaticReadOnlyClass();
	  RESULT.access = a;
	  RESULT.isFinal = true;
	  RESULT.readOnly = true;
	
              CUP$parser$result = new java_cup.runtime.Symbol(15/*AccessStaticReadOnly*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // AccessStaticReadOnly ::= Access STATIC FINAL 
            {
              AccessStaticReadOnlyClass RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	  RESULT = new AccessStaticReadOnlyClass();
	  RESULT.access = a;
	  RESULT.isStatic = true;
	  RESULT.isFinal = true;
	
              CUP$parser$result = new java_cup.runtime.Symbol(15/*AccessStaticReadOnly*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AccessStaticReadOnly ::= Access STATIC READONLY 
            {
              AccessStaticReadOnlyClass RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	  RESULT = new AccessStaticReadOnlyClass();
	  RESULT.access = a;
	  RESULT.isStatic = true;
	  RESULT.readOnly = true;
	
              CUP$parser$result = new java_cup.runtime.Symbol(15/*AccessStaticReadOnly*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AccessStaticReadOnly ::= STATIC FINAL 
            {
              AccessStaticReadOnlyClass RESULT = null;
		
	  RESULT = new AccessStaticReadOnlyClass();
	  RESULT.isStatic = true;
	  RESULT.isFinal = true;
	
              CUP$parser$result = new java_cup.runtime.Symbol(15/*AccessStaticReadOnly*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AccessStaticReadOnly ::= STATIC READONLY 
            {
              AccessStaticReadOnlyClass RESULT = null;
		
	  RESULT = new AccessStaticReadOnlyClass();
	  RESULT.isStatic = true;
	  RESULT.readOnly = true;
	
              CUP$parser$result = new java_cup.runtime.Symbol(15/*AccessStaticReadOnly*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AccessStaticReadOnly ::= Access FINAL 
            {
              AccessStaticReadOnlyClass RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          RESULT = new AccessStaticReadOnlyClass();
          RESULT.access = a;
          RESULT.isFinal = true;
        
              CUP$parser$result = new java_cup.runtime.Symbol(15/*AccessStaticReadOnly*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AccessStaticReadOnly ::= Access READONLY 
            {
              AccessStaticReadOnlyClass RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          RESULT = new AccessStaticReadOnlyClass();
          RESULT.access = a;
          RESULT.readOnly = true;
        
              CUP$parser$result = new java_cup.runtime.Symbol(15/*AccessStaticReadOnly*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AccessStaticReadOnly ::= Access STATIC 
            {
              AccessStaticReadOnlyClass RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	  RESULT = new AccessStaticReadOnlyClass();
	  RESULT.access = a;
	  RESULT.isStatic = true;
	
              CUP$parser$result = new java_cup.runtime.Symbol(15/*AccessStaticReadOnly*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AccessStaticReadOnly ::= FINAL 
            {
              AccessStaticReadOnlyClass RESULT = null;
		
	  RESULT = new AccessStaticReadOnlyClass();
	  RESULT.isFinal = true;
	
              CUP$parser$result = new java_cup.runtime.Symbol(15/*AccessStaticReadOnly*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AccessStaticReadOnly ::= READONLY 
            {
              AccessStaticReadOnlyClass RESULT = null;
		
	  RESULT = new AccessStaticReadOnlyClass();
	  RESULT.readOnly = true;
	
              CUP$parser$result = new java_cup.runtime.Symbol(15/*AccessStaticReadOnly*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AccessStaticReadOnly ::= STATIC 
            {
              AccessStaticReadOnlyClass RESULT = null;
		
	  RESULT = new AccessStaticReadOnlyClass();
	  RESULT.isStatic = true;
	
              CUP$parser$result = new java_cup.runtime.Symbol(15/*AccessStaticReadOnly*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AccessStaticReadOnly ::= Access 
            {
              AccessStaticReadOnlyClass RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	  RESULT = new AccessStaticReadOnlyClass();
	  RESULT.access = a;
	
              CUP$parser$result = new java_cup.runtime.Symbol(15/*AccessStaticReadOnly*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NewProperty ::= AccessStaticReadOnly Type IDENTIFIER SEMI 
            {
              NewPropertyClass RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AccessStaticReadOnlyClass a = (AccessStaticReadOnlyClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
	  RESULT = new NewPropertyClass ();
	  RESULT.type = t;
	  RESULT.id = id;
	  RESULT.accessStaticR = a;
	
              CUP$parser$result = new java_cup.runtime.Symbol(13/*NewProperty*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NewProperty ::= AccessStaticReadOnly Type IDENTIFIER EQ Value SEMI 
            {
              NewPropertyClass RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AccessStaticReadOnlyClass a = (AccessStaticReadOnlyClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ValueClass v = (ValueClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
	  RESULT = new NewPropertyClass ();
	  RESULT.type = t;
	  RESULT.id = id;
	  RESULT.value = v;
	  RESULT.accessStaticR = a;
	
              CUP$parser$result = new java_cup.runtime.Symbol(13/*NewProperty*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NewProperty ::= Type IDENTIFIER SEMI 
            {
              NewPropertyClass RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
	  RESULT = new NewPropertyClass ();
	  RESULT.type = t;
	  RESULT.id = id;
	
              CUP$parser$result = new java_cup.runtime.Symbol(13/*NewProperty*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NewProperty ::= Type IDENTIFIER EQ Value SEMI 
            {
              NewPropertyClass RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ValueClass v = (ValueClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
	  RESULT = new NewPropertyClass ();
	  RESULT.type = t;
	  RESULT.id = id;
	  RESULT.value = v;
	
              CUP$parser$result = new java_cup.runtime.Symbol(13/*NewProperty*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NewProperties ::= NewProperties NewProperty 
            {
              Vector RESULT = null;
		int npsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int npsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector nps = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int npleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int npright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NewPropertyClass np = (NewPropertyClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = nps; RESULT.add(np); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*NewProperties*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NewProperties ::= NewProperty 
            {
              Vector RESULT = null;
		int npleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int npright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NewPropertyClass np = (NewPropertyClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Vector(); RESULT.add(np); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*NewProperties*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PredefinedProperty ::= IDENTIFIER EQ Value SEMI 
            {
              PPropertyClass RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ValueClass v = (ValueClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	  RESULT = new PPropertyClass();
	  RESULT.id = id;
	  RESULT.value = v;
	
              CUP$parser$result = new java_cup.runtime.Symbol(11/*PredefinedProperty*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PredefinedProperties ::= PredefinedProperties PredefinedProperty 
            {
              Vector RESULT = null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector ps = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		PPropertyClass p = (PPropertyClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	  RESULT = ps;
	  RESULT.add(p);
	
              CUP$parser$result = new java_cup.runtime.Symbol(10/*PredefinedProperties*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PredefinedProperties ::= PredefinedProperty 
            {
              Vector RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		PPropertyClass p = (PPropertyClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	  RESULT = new Vector();
	  RESULT.add(p);
	
              CUP$parser$result = new java_cup.runtime.Symbol(10/*PredefinedProperties*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Properties ::= PredefinedProperties NewProperties 
            {
              PropertiesClass RESULT = null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector pp = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int npleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int npright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector np = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	    RESULT = new PropertiesClass();
	    RESULT.nProperties = np;
	    RESULT.pProperties = pp;
	  
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Properties*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Properties ::= NewProperties 
            {
              PropertiesClass RESULT = null;
		int npleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int npright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector np = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	    RESULT = new PropertiesClass();
	    RESULT.nProperties = np;
	  
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Properties*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Properties ::= PredefinedProperties 
            {
              PropertiesClass RESULT = null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector pp = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	    RESULT = new PropertiesClass();
	    RESULT.pProperties = pp;
	  
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Properties*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Properties ::= 
            {
              PropertiesClass RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*Properties*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ClassContents ::= Properties Parts 
            {
              Contents RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PropertiesClass p = (PropertiesClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector ps = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	  RESULT = new Contents();
	  RESULT.properties = p;
	  RESULT.parts = ps;
	
              CUP$parser$result = new java_cup.runtime.Symbol(8/*ClassContents*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ClassContents ::= Properties Parts Methods 
            {
              Contents RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PropertiesClass p = (PropertiesClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector ps = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		MethodsClass m = (MethodsClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
	  RESULT = new Contents();
	  RESULT.properties = p;
	  RESULT.parts = ps;
	  RESULT.methods = m;
        
              CUP$parser$result = new java_cup.runtime.Symbol(8/*ClassContents*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SilObject ::= Access CLASS IDENTIFIER EXTENDS Name IMPLEMENTS InterfaceList LCPAREN ClassContents RCPAREN 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Contents c = (Contents)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          fileName = new String(id + ".java");

          silObject = new PartClass();
	  silObject.isTopLevel = true;
	  silObject.access = a + " ";
          silObject.superClass = n;
          silObject.name = id;
          silObject.contents = c;
	  silObject.table = new Hashtable();
	  silObject.interfaceList = l;
          /* initializeTable(silObject.table); */
          if( !n.equals("CompositeShape") ) {	// CompositeShape is root
	    initializeTable(silObject, n);
	  }

	  System.out.println("finish parsing SilObject");

          generateCode();
        
              CUP$parser$result = new java_cup.runtime.Symbol(2/*SilObject*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SilObject ::= CLASS IDENTIFIER EXTENDS Name IMPLEMENTS InterfaceList LCPAREN ClassContents RCPAREN 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Contents c = (Contents)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          fileName = new String(id + ".java");

          silObject = new PartClass();
	  silObject.isTopLevel = true;
	  silObject.access = "";
          silObject.superClass = n;
          silObject.name = id;
          silObject.contents = c;
	  silObject.table = new Hashtable();
	  silObject.interfaceList = l;
          /* initializeTable(silObject.table); */
          if( !n.equals("CompositeShape") ) {	// CompositeShape is root
	    initializeTable(silObject, n);
	  }

	  System.out.println("finish parsing SilObject");

          generateCode();
        
              CUP$parser$result = new java_cup.runtime.Symbol(2/*SilObject*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SilObject ::= Access CLASS IDENTIFIER IMPLEMENTS InterfaceList LCPAREN ClassContents RCPAREN 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Contents c = (Contents)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          fileName = new String(id + ".java");

          silObject = new PartClass();
          silObject.isTopLevel = true;
          silObject.access = a + " ";
          silObject.superClass = null;	// no superclass
	  silObject.interfaceList = l;	// implements interface
          silObject.name = id;
          silObject.contents = c;
          silObject.table = new Hashtable();
          /* initializeTable(silObject.table); */

          System.out.println("finish parsing SilObject");

          generateCode();
        
              CUP$parser$result = new java_cup.runtime.Symbol(2/*SilObject*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SilObject ::= CLASS IDENTIFIER IMPLEMENTS InterfaceList LCPAREN ClassContents RCPAREN 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Contents c = (Contents)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          fileName = new String(id + ".java");

          silObject = new PartClass();
          silObject.isTopLevel = true;
          silObject.access = "";
          silObject.superClass = null;	// no superclass
	  silObject.interfaceList = l;	// implements interface
          silObject.name = id;
          silObject.contents = c;
          silObject.table = new Hashtable();
          /* initializeTable(silObject.table); */

          System.out.println("finish parsing SilObject");

          generateCode();

        
              CUP$parser$result = new java_cup.runtime.Symbol(2/*SilObject*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SilObject ::= Access CLASS IDENTIFIER EXTENDS Name LCPAREN ClassContents RCPAREN 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Contents c = (Contents)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          fileName = new String(id + ".java");

          silObject = new PartClass();
	  silObject.isTopLevel = true;
	  silObject.access = a + " ";
          silObject.superClass = n;
          silObject.name = id;
          silObject.contents = c;
	  silObject.table = new Hashtable();
          /* initializeTable(silObject.table); */
          if( !n.equals("CompositeShape") ) {	// CompositeShape is root
	    initializeTable(silObject, n);
	  }

	  System.out.println("finish parsing SilObject");

          generateCode();
        
              CUP$parser$result = new java_cup.runtime.Symbol(2/*SilObject*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SilObject ::= CLASS IDENTIFIER EXTENDS Name LCPAREN ClassContents RCPAREN 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Contents c = (Contents)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	  fileName = new String(id + ".java");

	  silObject = new PartClass();
	  silObject.isTopLevel = true;
	  silObject.access = "";
          silObject.superClass = n;
          silObject.name = id;
	  silObject.contents = c;
	  silObject.table = new Hashtable();
	  /* initializeTable(silObject.table); */
          if( !n.equals("CompositeShape") ) {	// CompositeShape is root
	    initializeTable(silObject, n);
	  }

	  System.out.println("finish parsing SilObject");

	  generateCode();

	
              CUP$parser$result = new java_cup.runtime.Symbol(2/*SilObject*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ImportStmt ::= IMPORT DOTTEDNAME DOT ASTERISK SEMI 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
	  importNames.add(new String(n+".*"));
	
              CUP$parser$result = new java_cup.runtime.Symbol(5/*ImportStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ImportStmt ::= IMPORT Name SEMI 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
	  importNames.add(new String(n));
	
              CUP$parser$result = new java_cup.runtime.Symbol(5/*ImportStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ImportStmts ::= ImportStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*ImportStmts*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ImportStmts ::= ImportStmts ImportStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*ImportStmts*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PackageStmt ::= PACKAGE Name SEMI 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
	  packageName = new String(n);
	
              CUP$parser$result = new java_cup.runtime.Symbol(3/*PackageStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Preamble ::= PackageStmt ImportStmts 
            {
              Object RESULT = null;
		 System.out.println("finish parsing Preamble"); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Preamble*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Preamble ::= ImportStmts 
            {
              Object RESULT = null;
		 System.out.println("finish parsing Preamble"); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Preamble*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Preamble ::= PackageStmt 
            {
              Object RESULT = null;
		 System.out.println("finish parsing Preamble"); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Preamble*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Preamble ::= 
            {
              Object RESULT = null;
		 System.out.println("finish parsing Preamble"); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Preamble*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ObjectFile EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ObjectFile ::= Preamble SilObject 
            {
              Object RESULT = null;
		 System.out.println("accept ObjectFile"); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*ObjectFile*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

